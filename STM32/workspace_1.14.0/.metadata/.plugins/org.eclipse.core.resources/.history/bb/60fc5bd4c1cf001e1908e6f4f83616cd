/*
 * stm32f446xx_gpio_driver.h
 *
 *  Created on: Feb 20, 2024
 *      Author: mirafra
 */

#ifndef INC_STM32F446XX_GPIO_DRIVER_H_
#define INC_STM32F446XX_GPIO_DRIVER_H_

#include "stm32f446xx.h"


#define GPIO_MODE_IN		0	// 	Input (reset state)
#define GPIO_MODE_OUT		1	// 	General purpose output mode
#define GPIO_MODE_ALTFN		2	// 	Alternate function mode
#define GPIO_MODE_ANALOG	3	// 	Analog mode
#define GPIO_MODE_IT_FT		4	// 	Input at FALLING EDGE
#define GPIO_MODE_IT_RT		5	// 	Input at RISING EDGE
#define GPIO_MODE_IT_FRT	6	// 	Input at RISING and FALLING EDGE



typedef struct{

	uint8_t GPIO_PinNumber;
	uint8_t GPIO_PinMode;
	uint8_t GPIO_PinSpeedl;
	uint8_t GPIO_PinPuPdCtrl;
	uint8_t GPIO_PinOPType;
	uint8_t GPIO_PinAltFunMode;
}GPIO_PinConfig_t;


typedef struct{

	GPIO_RegDef_t *pGPIOx; // This pointer holds the base address of the GPIO port.
	GPIO_PinConfig_t GPIO_PinConfig; // This holds GPIO pin configurations
}GPIOx_Handle_t;

//Peripheral Clock Control
void GPIO_PeripheralClkCtrl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi);

/*
 *GPIO port Init and DeInit
 */
void GPIO_Inint(GPIOx_Handle_t *pGPIOHandle);
void GPIO_DeInit(GPIO_RegDef_t *pGPIOx);

/*GPIO Read and write*/
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber);
uint16_t GPIO_ReadFromInputPort(GPIO_RegDef_t *pGPIOx);
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber, uint8_t Value);
void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx, uint16_t Value);
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber);

/*
 * Interrupt config and Handle
 */
void GPIO_IRQConfig(uint8_t IRQNumber, uint8_t IRQPriority, uint8_t EnOrDi);
void GPIO_IRQHandle(uint8_t PinNumber);




#endif /* INC_STM32F446XX_GPIO_DRIVER_H_ */
